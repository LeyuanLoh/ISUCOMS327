Edward Mahoney - ermahone@iastate.edu

Basically all the code that matters this week is dungeon-disk.c. This is the save and load methods that will be called.
They are fairly lengthy, but they have to be to be in order to be as safe as they are. The load method in particular
tries to protect against every corner case I could think of. To be more efficient, the entire file is read into memory
and the entire byte array is operated on in memory. Same for writing the disk. Build the array in memory, then write to
disk with one call to fwrite().

Character.c and character.h contain some new small stuff to support the PC, and to look forward to the later projects.
program-init.c also contains some methods to create the directories it needs and do some heavy command line parsing.

Do ./rogue --help for options. It can take seeds, and load and save to directories provided by the user.

Additionally it can load and save pgm files (see --help) and with the --stairs switch it will generate stairs for the
pgm files, or any dungeons that are loaded that don't have stairs saved.

In theory, this code will build on Windows as well. Haven't tested, but it's a fun challenge to do. I also refactored
the 2D arrays to be allocated with a single call to malloc(), then use a macro to simulate [][] access. Dijkstra.c is
still incredibly inefficient (on the order of the average generation making 2,000,000 calls to the cost function in it).
Next week I will convert this to a priority queue, and rip all recursion out of this code including in partition and
the tree functions, but for now, it works just fine.

White space = Rocks
Grey space = Corridor
Black space = Room

< = Up Stair
> = Down Stair

Code has been ran through valgrind to find any memory leaks: none were found.
See comments in code for additional documentation. It's heavily heavily commented.